A Semaphore-based Solution to Sequential CH4 Production Problem
---------------------------------------------------------------

shared int waiting_C = 0, waiting_H = 0
semaphore S = 1, SC = 0, SH = 0

Process C:
  wait(S) // acquire lock on mutex before accessing shared memory
  if waiting_H >= 4:  // if enough H is waiting, continue past barrier
    for(i = 0; i < 4; i++): // release 4 H
      signal(SH)
    waiting_H -= 4
    signal(S) // release lock on mutex
  else: // not enough H is waiting, so wait at barrier
    waiting_C += 1
    signal(S) // release lock on mutex
    wait(SC)

Process H:
  wait(S) // acquire lock on mutex before accessing shared memory
  if waiting_H >= 3 and waiting_C >= 1:  // if enough C and H is waiting, continue past barrier
    for(i = 0; i < 3; i++): // release 3 H
      signal(SH)
    waiting_H -= 3
    signal(SC) // release 1 C
    waiting_C -= 1
    signal(S) // release lock on mutex
  else: // not enough H or C is waiting, so wait at barrier
    waiting_H += 1
    signal(S) // release lock on mutex
    wait(SH)


